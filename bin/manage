#!/bin/sh
# Here we can set all settings
export DAS_CONFIG=$PWD/dasconfig.json
export DAS_LOG=$PWD/das2go.log

usage(){
    echo $usage
    echo "Usage: das_server {start|stop|status|restart}"
    echo "       start  : start DAS service"
    echo "       stop   : stop DAS service"
    echo "       status : report status of DAS service"
    echo "       restart: restart DAS service"
}
if [ $# != 1 ]; then
    usage
    exit 1
fi

# helper function to wait for MongoDB appearance
# it will incrementally increase waiting time with 20 iterations (~3minute)
start_das(){
    nohup das_server $DAS_CONFIG 2>&1 1>& $DAS_LOG < /dev/null &
}
stop_das(){
    echo "Stop DAS service..."
    local pid=`ps auxwww | grep das_server.py | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    if [ -n "${pid}" ]; then
        kill -9 ${pid}
    fi
}
status_das()
{
    local pid=`ps auxwww | grep das2go | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`

    if  [ -z $pid ]; then
        echo "DAS is not running"
        return
    fi
    if  [ `uname` == "Darwin" ]; then
        nth=`ps -M -p $pid | grep -v USER | wc -l | awk '{print $1}'`
    else
        nth=`ps -L -p $pid | grep -v PID | wc -l | awk '{print $1}'`
    fi
    echo "DAS server runs with $nth threads"
    if [ ! -z "${pid}" ]; then
        echo "DAS service is running, pid=${pid}"
        ps -f -wwww -p ${pid}
    else
        echo "DAS service is not running"
    fi
}

case "$1" in
 restart)
    stop_das
    start_das 
    ;;
 stop)
    stop_das
    ;;
 status)
    status_das
    ;;
 start)
    stop_das
    start_das
    ;;
 *)
    usage
    exit 1
    ;;
esac

exit $RETVAL
